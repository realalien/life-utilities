# -*- python -*-
#  -*- coding: utf-8 -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# AlienBrain settings
#ab_user = 'administrator'
#ab_passwd = 'mes0Spicy'
#ab_server = 'spicyfile'
#ab_project = 'Alice2Game'
#ab_branch = 'Root Branch'

#Perforce settings
p4env = {
    'port':'spicyfile:1666',
    'user':'admin',
    'passwd':'',
    'client':'Admin_spicyfile_1666',
    'branch':'',
    'customview':'''View:
	//depot/Alice2_Prog/Development/... //%client%/Development/...
	+//depot/Alice2_Prog/Tools/... //%client%/Tools/...
	+//depot/Alice2_Bin/PC_Dependencies/... //%client%/PC_Dependencies/...
	+//depot/Alice2_Bin/Binaries/... //%client%/Binaries/...
	+//depot/Alice2_Bin/Engine/... //%client%/Engine/...
	+//depot/Alice2_Bin/AliceGame/... //%client%/AliceGame/...
	+//depot/Alice2_Bin/*.* //%client%/*.*
''',
    'workspace' : 'Admin_spicyfile_1666_NightlySlave',
    }

nightly_build_info = {
    'slavename': "NightlySlave",
    'slavepasswd' : "BuildBot",
}
####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
#c['slaves'] = [BuildSlave("buildslave01", "bot1passwd")]

# to limit to two concurrent builds on a slave, use
c['slaves'] = [ BuildSlave("BuildSlave001", "BuildBot", max_builds=1),
                BuildSlave("BuildSlave002", "BuildBot", max_builds=1),
                BuildSlave(nightly_build_info['slavename'],nightly_build_info['slavepasswd'], max_builds=1),
              ]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

#from buildbot.changes.abpoller import ABSource
c['change_source'] = []

#c['change_source'].append(ABSource(ab_user, ab_passwd, ab_server,
#                        ab_project, ab_branch,
#                        pollinterval=8,  inittime=-3600*0.5))

from buildbot.changes.p4poller import P4Source
c['change_source'].append(
    P4Source(
        p4base='//depot/',
        p4port=p4env['port'],
        p4user=p4env['user'],
        p4passwd=p4env['passwd'],
        pollinterval=5,
        p4bin='C:/Program Files/Perforce/p4.exe',
        ))



# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler, Dependent
c['schedulers'] = []

import os

ucExts = ['.uc']
cppExts = ['.c', '.cpp', '.h', '.inl']

def hasUC(change):
    for file in change.files:
        fileExt = os.path.splitext(file.lower())[1]
        if fileExt in ucExts:
            return True
    return False

def hasCPP(change):
    for file in change.files:
        fileExt = os.path.splitext(file.lower())[1]
        if fileExt in cppExts:
            return True
    return False

def hasCPPorUC(change):
    return hasUC(change) or hasCPP(change)

Alice2PC_Check_UC_CPP = Scheduler(name="Alice2PC_Check_UC_CPP", branch=None,
                                 treeStableTimer=0,
                                 fileIsImportant=hasCPPorUC,
                                 builderNames=["Alice2PC_Build_Script"])
c['schedulers'].append(Alice2PC_Check_UC_CPP)

Alice2PC_BuildCPP = Scheduler(name="Alice2PC_BuildCPP", branch=None,
                                 treeStableTimer=0,
                                 fileIsImportant=hasCPPorUC,
                                 builderNames=["Alice2PC_Build_CPP"])
c['schedulers'].append(Alice2PC_BuildCPP)

Alice2PS3_BuildCPP = Scheduler(name="Alice2PS3_BuildCPP", branch=None,
                                 treeStableTimer=0,
                                 fileIsImportant=hasCPPorUC,
                                 builderNames=["Alice2PS3_Build"])
c['schedulers'].append(Alice2PS3_BuildCPP)

Alice2Xbox360_BuildCPP = Scheduler(name="Alice2Xbox360_BuildCPP", branch=None,
                                 treeStableTimer=0,
                                 fileIsImportant=hasCPPorUC,
                                 builderNames=["Alice2Xbox360_Build"])
c['schedulers'].append(Alice2Xbox360_BuildCPP)

languageExts = ['.int', '.fra', '.deu', '.ita', '.rus',
                '.jpn', '.esm', '.esn', '.cor', '.cht',
                '.pol', '.hun', '.cze', '.slo',
                ]
pkgExts = ['.upk', '.umap', '.bin', '.ini'] + languageExts

def hasPkgData(change):
    for file in change.files:
        fileExt = os.path.splitext(file.lower())[1]
        if fileExt in pkgExts:
            return True
    return False

def onlyhasPkgData(change):
    return hasPkgData(change) and not hasCPPorUC(change)

Alice2PC_Check_PkgData = Scheduler(name="Alice2PC_Check_PkgData", branch=None,
                                 treeStableTimer=0,
                                 fileIsImportant=onlyhasPkgData,
                                 builderNames=["Alice2PC_Test_PkgData"])
c['schedulers'].append(Alice2PC_Check_PkgData)

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

c['builders'] = []

from buildbot.process import factory
#from buildbot.steps.source import AlienBrainSync
from buildbot.steps.source import P4
from buildbot.steps.shell import Compile, ShellCommand, WarningCountingShellCommand
from buildbot.steps.python_twisted import Trial

class TestPkgData(WarningCountingShellCommand):
    name = "TestPkgData"
    description = ["testing package data"]
    descriptionDone = ["test done"]
    logname = 'Launch.log'
    logfiles = { logname : '../../AliceGame/Logs/Launch.log'}
    command = ['AliceGame.exe']
    workdir = './Binaries/Win32'

    warningPattern = '^[Ww](arning|ARNING)[: ,]$'
    errorPattern = '^[Ee](rror|RROR)[: ,]$'
    
    def start(self):
        getbase = lambda f: os.path.splitext(os.path.basename(f))[0]
        getext = lambda f: os.path.splitext(os.path.basename(f))[1]
        mapNames = [ getbase(f) for f in self.build.allFiles() if getext(f) == '.umap']
        pkgNames = [ getbase(f) for f in self.build.allFiles() if getext(f) == '.upk']
        from twisted.python import log
        log.msg('mapNames = %s' % str(mapNames))
        log.msg('pkgNames = %s' % str(pkgNames))
        self.command = ['AliceGame.exe']
        for mapName in mapNames:
			if mapName.find('_P.umap')!=-1:
				self.command.append(mapName)
				break
        self.command.append('-AutoQuit=30')
        self.command.append('-UNATTENDED')
        self.command.append('-NOPAUSE')
        WarningCountingShellCommand.start(self)

    def startCommand(self, cmd, errorMessages=[]):
        self.cmd = cmd
        WarningCountingShellCommand.startCommand(self, cmd, errorMessages)

    def createSummary(self, log):
        mylog = self.cmd and self.cmd.logs.get(self.logname, log) or log
        WarningCountingShellCommand.createSummary(self, mylog)

f1 = factory.BuildFactory()
f1.addStep(P4('//depot/', None, p4env['port'], p4env['user'], p4env['passwd'], [], p4env['customview'], p4env['client']))
f1.addStep(Compile(command=['UnityAliceGame.bat'], workdir='Development/Src', timeout=1000))
f1.addStep(Compile(command=['AliceGame.exe', 'make', '-updateinisauto', '-auto', '-unattended', '-NOPAUSE'], 
                    workdir=r'./Binaries/Win32', timeout=90))

b1 = {'name': "Alice2PC_Build_Script",
      'slavenames': ["BuildSlave001","BuildSlave002"],
      'builddir': "Alice2Build",
      'factory': f1,
      }

c['builders'].append(b1)

f1 = factory.BuildFactory()
f1.addStep(P4('//depot/', None, p4env['port'], p4env['user'], p4env['passwd'], [], p4env['customview'], p4env['client']))
f1.addStep(Compile(command=['UnityAliceGame.bat'], workdir='Development/Src', timeout=1000))

b1 = {'name': "Alice2PC_Build_CPP",
      'slavenames': ["BuildSlave001","BuildSlave002"],
      'builddir': "Alice2Build",
      'factory': f1,
      }

c['builders'].append(b1)

f1 = factory.BuildFactory()
f1.addStep(P4('//depot/', None, p4env['port'], p4env['user'], p4env['passwd'], [], p4env['customview'], p4env['client']))
f1.addStep(TestPkgData(timeout=300))

b1 = {'name': "Alice2PC_Test_PkgData",
      'slavenames': ["BuildSlave001","BuildSlave002"],
      'builddir': "Alice2Build",
      'factory': f1,
      }

c['builders'].append(b1)

f1 = factory.BuildFactory()
f1.addStep(P4('//depot/', None, p4env['port'], p4env['user'], p4env['passwd'], [], p4env['customview'], p4env['client']))
f1.addStep(Compile(command=['UnityAliceGame PS3.bat'], workdir='Development/Src', timeout=1200))

b1 = {'name': "Alice2PS3_Build",
      'slavenames': ["BuildSlave001","BuildSlave002"],
      'builddir': "Alice2Build",
      'factory': f1,
      }

c['builders'].append(b1)

f1 = factory.BuildFactory()
f1.addStep(P4('//depot/', None, p4env['port'], p4env['user'], p4env['passwd'], [], p4env['customview'], p4env['client']))
f1.addStep(Compile(command=['UnityAliceGame Xbox360.bat'], workdir='Development/Src', timeout=1200))

b1 = {'name': "Alice2Xbox360_Build",
      'slavenames': ["BuildSlave001","BuildSlave002"],
      'builddir': "Alice2Build",
      'factory': f1,
      }

c['builders'].append(b1)

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=9911, allowForce=True))

Alice2Leaders = ['chenbaowu@spicyhorse.com', 'wim@spicyhorse.com',
				 'zhujiacheng@spicyhorse.com',
				]
from buildbot.status import mail
#c['status'].append(mail.MailNotifier(fromaddr='spicybot@gmail.com', mode='failing',
#                                     user='spicybot@gmail.com', password='mes0Spicy',
#                                     relayhost='smtp.gmail.com', extraRecipients=Alice2Leaders,
#                                     lookup='spicyhorse.com', sendToInterestedUsers=True))
c['status'].append(mail.MailNotifier(fromaddr='Alice2BuildBot@spicyhorse.com', mode='problem',
                                     relayhost='relay.caresys.com.cn', extraRecipients=Alice2Leaders,
                                     lookup='spicyhorse.com', sendToInterestedUsers=True))

# ------------------------------------------------------------------------------------------
# Nightly build section
# ------------------------------------------------------------------------------------------

# ############
# Schedule
# ############
from buildbot.scheduler import Periodic, Nightly

# nightly_build_schedule = Nightly(name="nightly_build_all", 
				 # branch=None,
				 # builderNames=['night_builder'],
				 # hour=1,
				 # minute=0)
# c['schedulers'].append(nightly_build_schedule)

Periodically_Build_All= Periodic(name="Periodically_Build_All", 
				 builderNames=['periodic_builder'],
				 periodicBuildTimer=24*60*60)
c['schedulers'].append(Periodically_Build_All)

nf=factory.BuildFactory()

# ########################
# Step#1, backup previous nightly built version, delete oldest built if disk space is not enough for 2 new build
# ########################
# HINT: detailed design, 
#  e.g.  determine the disk space by inheriting shellcommand, parse the output? or put all info into one log?
#  e.g.  assuming the disk use by recording the former-build sizes and delta.
#  e.g.  maybe instead of windows shell, we can file transfer .exe or .py file to the client and execute the command, what about the privilege?
#  q: whether to call a shell command or to call a python script?
#TODO:

# Hint: According to the doc(http://djmitche.github.com/buildbot/docs/0.7.10/#Creating-a-buildslave),
#    from point no.4, I suppose that we can deploy py code to make build more easier, but I have to enfore
#    those checking rule from build master.
#    also see:(http://buildbot.net/trac/ticket/221)
# Hint: to support python code transfer, I assume that by using DSL or methodize the fileuploader

# ########################
# Step#2, get all data and code to empty directory(create a new workspace)
p4co_step = P4('//depot/', None, p4env['port'], p4env['user'], p4env['passwd'], [], p4env['customview'], p4env['client'])
nf.addStep(p4co_step)
# ########################

# In step3, AliceGame.exe has warning sometimes and that fails the whole process, as CBW suggested, this step is carried out before compile script.
build_pc_file = Compile(command=['UnityAliceGame.bat'], workdir='Development/Src', timeout=1000)
nf.addStep(build_pc_file)

# ########################
# Step#3, build scripts
# ########################
# Note: comment the code below if using triggering schedule
compile_script_step = Compile(command=['AliceGame.exe', 'make', '-updateinisauto', '-auto', '-unattended', '-NOPAUSE'],
                      logfiles = { "Launch.log":"../../AliceGame/Logs/Launch.log"},workdir=r'./Binaries/Win32', timeout=1000)
nf.addStep(compile_script_step)

# ########################
# Step#4, build cpp for PC, PS3 and Xbox360
# ########################

# TODO: sug clean call to rebuild in case that new .h generated
#clean_step = Compile(command=['Clean.bat', 'AliceGame Win32', 'Release' ,'../../../Binaries/Win32/'], workdir='Development/Src/Targets', timeout=1000)
# TODO: add step to check installation of DirectX2008NOVredist(driver) AND DirectX 2008Aug SDK

#build_pc_file = Compile(command=['UnityAliceGame.bat'], workdir='Development/Src', timeout=1000)
#depre: nf.addStep(build_pc_file)   #  ==> 20090505 move ahead of step 'build script'


# for PC (# ESP.Notes: for PC and only, the script should be rebuilt after generating the .CPP 
# as new .h file may be also generated.)
recompile_script_step = Compile(command=['AliceGame.exe', 'make', '-updateinisauto', '-auto', '-unattended', '-NOPAUSE'],
                      logfiles = { "Launch.log":"../../AliceGame/Logs/Launch.log"},workdir=r'./Binaries/Win32', timeout=90)
#depre: nf.addStep(recompile_script_step)  # ==> same as the previous step does.

# for PS3
build_ps3_file = Compile(command=['UnityAliceGame PS3.bat'], workdir='Development/Src', timeout=1200)
nf.addStep(build_ps3_file)

# for XBOX
build_xbox_file = Compile(command=['UnityAliceGame Xbox360.bat'], workdir='Development/Src', timeout=1200)
nf.addStep(build_xbox_file)

# build script(UNTESTED)
build_script = Compile(command=['build_script.bat'], workdir='Binaries', timeout=1200)
nf.addStep(build_script)

# ########################
# ESP. the following steps have lower priority, cont. later. 
# ########################
# Step#5, build all shader caches for PC, PS3 and Xbox360
# ...TODO:
# Step#6, build paths, lighting, etc...
# ...TODO:

# Step#7, cook data for PC, PS3 and Xbox360 
cook_pc_data_step1 = Compile(command=['AliceGame.exe', 'make','-UNATTENDED','-NOPAUSE'], workdir=r'./Binaries/Win32', timeout=300)
cook_pc_data_step2 = ShellCommand(command=['AliceGame.exe', 'CookPackages', '-platform=PC', '-updateInisAuto','-UNATTENDED','-NOPAUSE'], logfiles = { "Launch.log":"../../AliceGame/Logs/Launch.log"},workdir=r'./Binaries/Win32', timeout=300)
#nf.addStep(cook_pc_data_step1)
#nf.addStep(cook_pc_data_step2)


cook_ps3_data_step1 = Compile(command=['AliceGame.exe', 'make','-UNATTENDED','-NOPAUSE'], workdir=r'./Binaries/Win32', timeout=300)
cook_ps3_data_step2 = Compile(command=['AliceGame.exe', 'CookPackages', '-platform=PS3', '-updateInisAuto','-UNATTENDED','-NOPAUSE'], logfiles = { "Launch.log":"../../AliceGame/Logs/Launch.log"},workdir=r'./Binaries/Win32', timeout=300)
#nf.addStep(cook_ps3_data_step1)
#nf.addStep(cook_ps3_data_step2)

cook_xbox_data_step1 = Compile(command=['AliceGame.exe', 'make','-UNATTENDED','-NOPAUSE'], workdir=r'./Binaries/Win32', timeout=300)
cook_xbox_data_step2 = Compile(command=['AliceGame.exe', 'CookPackages', '-platform=Xbox360', '-updateInisAuto','-UNATTENDED','-NOPAUSE'],logfiles = { "Launch.log":"../../AliceGame/Logs/Launch.log"}, workdir=r'./Binaries/Win32', timeout=300)
#nf.addStep(cook_xbox_data_step1)
#nf.addStep(cook_xbox_data_step2)


# ########################
# Step#8, run test cases
# ########################
#edit_alice_test_step = Compile(command=['Edit Alice2.bat'], workdir=r'./', timeout=200)
#nf.addStep(edit_alice_test_step)

#run_alice_test_step = Compile(command=['Run Alice2.bat'], workdir=r'./', timeout=200)
#nf.addStep(run_alice_test_step)

nf.addStep(TestPkgData(timeout=300))


# ...TODO: make sure the timeout is documented.

# Step#9, get memory report
# ...TODO: <placeholder>

# Step#10, get frame rate report
# ...TODO: <placeholder>

# Step#11, make distribution version for PC, PS3, Xbox360
# ...TODO: <placeholder>



# Step#12, list changes from previous nightly build 
nf.addStep(ShellCommand(command=["python gen_list_chg.py","--client="+p4env['client'], "-p", p4env['port'], "--slavename="+nightly_build_info['slavename']],workdir="Tools/night.build.log" ))

# Step#13, generate report (SUG: use .bat file)  #  should include: changelist from former build, bugzilla fixed bugs NO., memory chg , frame chg.
gen_report_step = ShellCommand(command=["python report.py"],workdir="Tools/night.build.log", env={"P4PORT":p4env['port'],"P4CLIENT":p4env['workspace']})
nf.addStep(gen_report_step)

# Step#14, submit report on perforce and send report to allalice2 (SUG: use .bat and .py file)
mail_notify_step = ShellCommand(command=["python mail_report.py"],workdir="./Tools/night.build.log")
nf.addStep(mail_notify_step)

# Step#15 submit all build artifacts
submit_artifacts_steps = ShellCommand(command=["python submit_artifacts.py","--client="+p4env['client'], "-p", p4env['port'], "--slavename="+nightly_build_info['slavename'] ],workdir="./Tools/night.build.log")
#nf.addStep(submit_artifacts_steps)  #  ==> tightly couple with p4env's workspace p4port settings. need to prove if portable.


periodic_builder = { 'name' : 'periodic_builder',
	'slavenames': [nightly_build_info['slavename'],],
	'builddir': "Alice2PeriodicBuild",
	'factory': nf,
}

c['builders'].append(periodic_builder)


#from buildbot.status import IRCServer
#IRCServer.RunIRCServer('Spicy_IRC_Server', ['buildfarm'])

#from buildbot.status import words
#c['status'].append(words.IRC(host="localhost", nick="buildbot", password="abc",
#                             channels=["buildfarm"]))

from buildbot.status import client
c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Alice2"
c['projectURL'] = "http://spicyfile:89/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://spicyfile:9911/"

